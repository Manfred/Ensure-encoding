= Ensure Encoding

Experimental project to find the best way to ensure a preferred encoding in
Strings coming from untrusted sources.

== Algorithms

The most sane way of dealing with character data is choosing an internal
representation for your application and convert all incoming and outgoing data
when necessary.

To ensure that our internal encoding is always at least valid we can choose to
do one of two things.

1. Throw an exception when we receive invalid character data. (ie. Our internal
encoding is UTF-8 and we receive Latin-1 data or invalid UTF-8)
2. Accept whatever we get and try to mold it in such a way that it becomes
usable in our application.

It is generally accepted to go for the second option, most of the times the
end-user has no way of solving these problems because a vendor made a mistake.
It's not very nice to shut them out.

There are a number of techniques when molding the character data to our needs.
Sniffing encoding, transcoding, dropping invalid characters are just a few
examples. We implement a number of these techniques so you can easily protect
your application from bad data.

== Ensure encoding

We've crammed at lot of functionality into the ensure_encoding method because
we want to keep the number of new methods on String to a minimum. We'll walk
through an example to show how it works.

  example = 'CafÃ©'
  example.encoding => #<Encoding:ISO-8859-1>
  
After ensuring the encoding of a string you can at least assume that you can
concatenate the string to another string with the same encoding. In other
words, it contains data valid for the specified encoding.

  example.ensure_encoding('UTF-8')
  example.encoding => #<Encoding:UTF-8>